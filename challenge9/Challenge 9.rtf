{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\froman\fcharset0 TimesNewRomanPSMT;
\f3\fmodern\fcharset0 Courier-Bold;\f4\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue120;\red163\green0\blue79;
\red255\green255\blue255;\red107\green0\blue109;\red135\green135\blue135;\red73\green17\blue135;\red148\green108\blue71;
\red0\green0\blue255;\red169\green0\blue15;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c0\c0\c54510;\cssrgb\c70588\c0\c38431;
\cssrgb\c100000\c100000\c100000;\cssrgb\c50196\c0\c50196;\cssrgb\c60000\c60000\c60000;\cssrgb\c36078\c14902\c60000;\cssrgb\c65098\c49804\c34902;
\cssrgb\c0\c0\c100000;\cssrgb\c72941\c0\c6667;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww15300\viewh16500\viewkind0
\deftab720
\pard\pardeftab720\sl560\sa240\partightenfactor0

\f0\b\fs48 \cf2 \expnd0\expndtw0\kerning0
Challenge 9: Find pangrams 
\f1\b0\fs24 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\b\fs32 \cf2 Difficulty: 
\f2\b0 Tricky\uc0\u8232 Write a function that returns true if it is given a string that is an English pangram, ignoring 
\f1\fs24 \

\f2\fs32 letter case.\uc0\u8232 
\f1\b Tip: 
\f2\b0 A pangram is a string that contains every letter of the alphabet at least once. 
\f1\fs24 \
\pard\pardeftab720\sl440\sa240\partightenfactor0

\f0\b\fs37\fsmilli18667 \cf2 Sample input and output 
\f1\b0\fs24 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa320\partightenfactor0
\ls1\ilvl0
\f2\fs32 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
The string \'93The quick brown fox jumps over the lazy dog\'94 should return true. \uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
The string \'93The quick brown fox jumped over the lazy dog\'94 should return false, \uc0\u8232 because it\'92s missing the S. \u8232 
\f0\b\fs37\fsmilli18667 Hints 
\f2\b0\fs32 \uc0\u8232 
\f1\b Hint #1: 
\f2\b0 Make sure you start by collapsing case using something like 
\f3\b \cf3 lowercased()
\f2\b0 \cf2 . 
\f1\b Hint #2: 
\f2\b0 You can compare letters using 
\f3\b \cf3 >
\f2\b0 \cf2 , 
\f3\b \cf3 >=
\f2\b0 \cf2 , and so on. \uc0\u8232 
\f1\b Hint #3: 
\f2\b0 If you remove duplicates and non-alphabetic characters, the remaining string should add up to 26 letters. \uc0\u8232 
\f0\b\fs37\fsmilli18667 Solution 
\f2\b0\fs32 \uc0\u8232 You could try and solve this using character sets, but it\'92s really not needed: Swift\'92s characters conform to 
\f3\b \cf3 Comparable
\f2\b0 \cf2 , so you can compare them against \'93a\'94 and \'93z\'94 directly to ensure they are alphabetical. \uc0\u8232 Once you know how to ensure a letter is alphabetical, all that remains is removing duplicates (easy using a set) and collapsing case (
\f3\b \cf3 lowercased() 
\f2\b0 \cf2 is fine), then comparing the count of the result against 26. \uc0\u8232 So, here\'92s an example solution in just three lines of code: 
\f1\fs24 \
\pard\pardeftab720\sl360\partightenfactor0

\f4\fs32 \cf4 \cb5 func \cf6 challenge9\cf7 (\cf2 input\cf7 : \cf8 String\cf7 ) \cf9 -> \cf8 Bool \cf7 \{\
\cf4    let set \cf9 = \cf6 Set\cf7 (\cf2 input\cf7 .\cf6 lowercased\cf7 ().\cf2 characters\cf7 )\
\cf4    let \cf2 letters \cf9 = \cf4 set\cf7 .\cf8 filter \cf7 \{ \cf2 $\cf10 0 \cf9 >= \cf11 "a" \cf9 && \cf2 $\cf10 0 \cf9 <= \cf11 "z" \cf7 \}\
\cf4    return \cf2 letters\cf7 .\cf8 count \cf9 == \cf10 26\
\pard\pardeftab720\sl360\sa240\partightenfactor0
\cf7 \} 
\f1\fs24 \cf2 \cb1 \
}