{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\froman\fcharset0 TimesNewRomanPSMT;
\f3\fmodern\fcharset0 Courier-Bold;\f4\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue120;\red163\green0\blue79;
\red255\green255\blue255;\red148\green108\blue71;\red135\green135\blue135;\red107\green0\blue109;\red169\green0\blue15;
\red232\green135\blue8;\red0\green0\blue255;\red73\green17\blue135;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c0\c0\c54510;\cssrgb\c70588\c0\c38431;
\cssrgb\c100000\c100000\c100000;\cssrgb\c65098\c49804\c34902;\cssrgb\c60000\c60000\c60000;\cssrgb\c50196\c0\c50196;\cssrgb\c72941\c0\c6667;
\cssrgb\c93333\c60000\c0;\cssrgb\c0\c0\c100000;\cssrgb\c36078\c14902\c60000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww15300\viewh16500\viewkind0
\deftab720
\pard\pardeftab720\sl560\sa240\partightenfactor0

\f0\b\fs48 \cf2 \expnd0\expndtw0\kerning0
Challenge 28: Log a message 
\f1\b0\fs24 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\b\fs32 \cf2 Difficulty: 
\f2\b0 Easy 
\f1\fs24 \

\f2\fs32 Write a logging function that accepts accepts a path to a log file on disk as well as a new log message. Your function should open the log file (or create it if it does not already exist), then append the new message to the log along with the current time and date. 
\f1\fs24 \

\b\fs32 Tip: 
\f2\b0 It\'92s important that you add line breaks along with each message, otherwise the log will just become jumbled. 
\f1\fs24 \
\pard\pardeftab720\sl440\sa240\partightenfactor0

\f0\b\fs37\fsmilli18667 \cf2 Sample input and output 
\f1\b0\fs24 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa320\partightenfactor0
\ls1\ilvl0
\f2\fs32 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
If the file does not exist, running your function should create it and save the new message. \uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
If it does exist, running your function should load the existing content and append the message to the end, along with suitable line breaking. \uc0\u8232 
\f0\b\fs37\fsmilli18667 Hints 
\f2\b0\fs32 \uc0\u8232 
\f1\b Hint #1: 
\f2\b0 I think it would be reasonable to use 
\f3\b \cf3 contentsOfFile 
\f2\b0 \cf2 to load the existing log file into a string. \uc0\u8232 
\f1\b Hint #2: 
\f2\b0 You can use 
\f3\b \cf3 try? 
\f2\b0 \cf2 and nil coalescing to provide a default value if the existing log file doesn\'92t exist. \uc0\u8232 
\f1\b Hint #3: 
\f2\b0 How you format the date and time for each message will be interesting, but don\'92t forget KISS: Keep It Simple, Stupid. \uc0\u8232 
\f1\b Hint #4: 
\f2\b0 What should happen if you can\'92t write the log file? This wasn\'92t specified in the challenge description, so you get to use some initiative. \uc0\u8232 
\f0\b\fs37\fsmilli18667 Solution 
\f2\b0\fs32 \uc0\u8232 This is a small and contained challenge, but gives you just enough scope to demonstrate your Swift skills. Specifically, there are three areas where your solution is open for discussion: 
\f1\fs24 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa320\partightenfactor0
\ls2\ilvl0
\f2\fs32 \cf2 \kerning1\expnd0\expndtw0 {\listtext	1.	}\expnd0\expndtw0\kerning0
How you load the log file, or provide a default value if the log hasn\'92t been created yet. \uc0\u8232 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2.	}\expnd0\expndtw0\kerning0
How you format dates to include in each log message. \uc0\u8232 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3.	}\expnd0\expndtw0\kerning0
How you write the updated log file back to disk, handling any errors that might occur. \uc0\u8232 \
\pard\pardeftab720\sl360\sa240\partightenfactor0
\cf2 The easiest way to solve the first is using one of my favorite Swift tips: combining 
\f3\b \cf3 try? 
\f2\b0 \cf2 with nil coalescing to provide a default value in cases where a thrown exception just means \'93missing value\'94. In code it looks like this: 
\f1\fs24 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\f4\fs32 \cf4 \cb5 var \cf2 existingLog \cf6 = \cf7 (\cf4 try\cf6 ? \cf8 String\cf7 (\cf2 contentsOfFile\cf7 : \cf2 logFile\cf7 )) \cf6 ?? \cf9 "" 
\f2 \cf2 \cb1 After that line has run, 
\f3\b \cf3 existingLog 
\f2\b0 \cf2 will either be an empty string or the contents of the log 
\f1\fs24 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\f2\fs32 \cf2 file. 
\f1\fs24 \

\f2\fs32 There are lots of ways to solve the second, but honestly the smartest way is also the easiest: just using 
\f3\b \cf3 Date() 
\f2\b0 \cf2 inside string interpolation. That will cause the current date and time to be printed out as \'93Year-Month-Day Hour:Minute:Second\'94, which is ideal. So, you would write this: 
\f1\fs24 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\f4\fs32 \cf2 \cb5 existingLog\cf7 .\cf8 append\cf7 (\cf9 "\\(Date()): \cf10 \\(\cf9 message\cf10 )\cf9 \\n"\cf7 )\cb1 \uc0\u8232 
\f2 \cf2 Finally, writing data to disk is a throwing function, so you need to decide what to do with any 
\f1\fs24 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\f2\fs32 \cf2 errors. You 
\f1\i could 
\f2\i0 ignore them, like this: 
\f1\fs24 \
\pard\pardeftab720\sl360\partightenfactor0

\f4\fs32 \cf11 _ \cf6 = \cf4 try\cf6 ? \cf2 existingLog\cf7 .\cf8 write\cf7 (\cf2 toFile\cf7 : \cf2 logFile\cf7 , \cf2 atomically\cf7 : \cf11 true\cf7 ,\
\cf2 encoding\cf7 : .\cf2 utf8\cf7 )\
\
\pard\pardeftab720\sl360\sa240\partightenfactor0

\f2 \cf2 ...but that\'92s probably not smart: failure to write log messages seems serious to me, so at the very least you will want to print a warning, like this: 
\f1\fs24 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\f4\fs32 \cf4 do \cf7 \{ 
\f1\fs24 \cf2 \
\pard\pardeftab720\sl280\partightenfactor0
\cf2 {{\NeXTGraphic page91image16080.png \width8660 \height360
}¬}\pard\pardeftab720\sl280\partightenfactor0
\cf2 \
\pard\pardeftab720\sl360\partightenfactor0

\f4\fs32 \cf4 try \cf2 existingLog\cf7 .\cf8 write\cf7 (\cf2 toFile\cf7 : \cf2 logFile\cf7 , \cf2 atomically\cf7 : \cf11 tr\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb5 encoding\cf7 : .\cf2 utf8\cf7 )\
\} \cf4 catch \cf7 \{\
\pard\pardeftab720\sl360\partightenfactor0
\cf8    print\cf7 (\cf9 "Failed to write to log: \cf10 \\\
(\cf9 error\cf7 .\cf9 localizedDescription\cf10 )\cf9 "\cf7 )\
\}\
\
\pard\pardeftab720\sl360\sa240\partightenfactor0

\f2 \cf2 \cb1 Another reasonable approach would be to do without 
\f3\b \cf3 do/catch
\f2\b0 \cf2 , just use 
\f3\b \cf3 try 
\f2\b0 \cf2 by itself, then mark the whole function with 
\f3\b \cf3 throws 
\f2\b0 \cf2 and let the call site deal with it. Regardless of what you choose, it leaves some scope for interesting discussion, which is always a good thing. 
\f1\fs24 \

\f2\fs32 Here\'92s my complete solution to this challenge: 
\f1\fs24 \
\pard\pardeftab720\sl360\partightenfactor0

\f4\fs32 \cf4 \cb5 func \cf8 challenge28\cf7 (\cf2 log message\cf7 : \cf12 \cb5 String\cf7 \cb5 , \cf2 to logFile\cf7 : \cf12 \cb5 String\cf7 \cb5 ) \{\
\cf4    var \cf2 existingLog \cf6 \cb5 = \cf7 \cb5 (\cf4 try\cf6 \cb5 ? \cf8 \cb5 String\cf7 (\cf2 contentsOfFile\cf7 : \cf2 logFile\cf7 )) \cf6 \cb5 ??\
\pard\pardeftab720\sl360\sa240\partightenfactor0
\cf9 \cb5 "" 
\f1\fs24 \cf2 \cb1 \
\pard\pardeftab720\sl360\partightenfactor0

\f4\fs32 \cf2 \cb5 existingLog\cf7 .\cf8 append\cf7 (\cf9 "\\(Date()): \cf10 \\(\cf9 message\cf10 )\cf9 \\n"\cf7 )\
\cf4 do \cf7 \{\
\cf4    try \cf2 existingLog\cf7 .\cf8 write\cf7 (\cf2 toFile\cf7 : \cf2 logFile\cf7 , \cf2 atomically\cf7 : \cf11 \cb5 true\cf7 \cb5 ,\
\cf2 encoding\cf7 : .\cf2 utf8\cf7 )\
   \} \cf4 catch \cf7 \{\
\pard\pardeftab720\sl360\partightenfactor0
\cf8       print\cf7 (\cf9 "Failed to write to log: \cf10 \\\
(\cf9 error\cf7 .\cf9 localizedDescription\cf10 )\cf9 "\cf7 )\
\pard\pardeftab720\sl360\sa240\partightenfactor0
\cf7 \cb5 \} \
\} 
\f1\fs24 \cf2 \cb1 \
}