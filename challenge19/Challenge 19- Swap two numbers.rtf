{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\froman\fcharset0 TimesNewRomanPSMT;
\f3\fmodern\fcharset0 Courier-Bold;\f4\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue120;\red163\green0\blue79;
\red255\green255\blue255;\red148\green108\blue71;\red107\green0\blue109;\red135\green135\blue135;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c0\c0\c54510;\cssrgb\c70588\c0\c38431;
\cssrgb\c100000\c100000\c100000;\cssrgb\c65098\c49804\c34902;\cssrgb\c50196\c0\c50196;\cssrgb\c60000\c60000\c60000;}
\margl1440\margr1440\vieww15300\viewh16500\viewkind0
\deftab720
\pard\pardeftab720\sl560\sa240\partightenfactor0

\f0\b\fs48 \cf2 \expnd0\expndtw0\kerning0
Challenge 19: Swap two numbers 
\f1\b0\fs24 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\b\fs32 \cf2 Difficulty: 
\f2\b0 Easy\uc0\u8232 Swap two positive variable integers, 
\f3\b \cf3 a 
\f2\b0 \cf2 and 
\f3\b \cf3 b
\f2\b0 \cf2 , without using a temporary variable. 
\f1\fs24 \
\pard\pardeftab720\sl440\sa240\partightenfactor0

\f0\b\fs37\fsmilli18667 \cf2 Sample input and output 
\f1\b0\fs24 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\f2\fs32 \cf2 \'95 Before running your code 
\f3\b \cf3 a 
\f2\b0 \cf2 should be 1 and 
\f3\b \cf3 b 
\f2\b0 \cf2 should be 2; afterwards, 
\f3\b \cf3 b 
\f2\b0 \cf2 should be 1 and 
\f3\b \cf3 a 
\f2\b0 \cf2 should be 2. 
\f1\fs24 \
\pard\pardeftab720\sl440\sa240\partightenfactor0

\f0\b\fs37\fsmilli18667 \cf2 Hints 
\f1\b0\fs24 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\b\fs32 \cf2 Hint #1: 
\f2\b0 There are lots of ways to solve this, but probably the easiest to remember is using tuples. 
\f1\fs24 \

\b\fs32 Hint #2: 
\f2\b0 Alternatively, try using the global Swift function 
\f3\b \cf3 swap()
\f2\b0 \cf2 .\uc0\u8232 
\f1\b Hint #3: 
\f2\b0 If you\'92re feeling fancy, you can solve this problem with arithmetic. 
\f1\fs24 \

\b\fs32 Hint #4: 
\f2\b0 If you\'92re feeling fancy and want to demonstrate your bit manipulation skills, you can also solve this problem using bitwise XOR. 
\f1\fs24 \
\pard\pardeftab720\sl440\sa240\partightenfactor0

\f0\b\fs37\fsmilli18667 \cf2 Solution 
\f1\b0\fs24 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\f2\fs32 \cf2 This is a favorite question of lazy interviewers \'96 people who don\'92t want to spend an hour of life coming up with genuinely interesting, useful questions that explore real Swift knowledge. It 
\f1\i used 
\f2\i0 to be important in Ye Olde Days when every byte mattered, but in a world where Slack on macOS happily chews through 400MB of RAM just idling this test is more a curiosity than anything else. 
\f1\fs24 \

\f2\fs32 Still, this question does one have benefit, which is that are idiomatic solutions for Swift developers \'96 i.e., Swifty ways to solve it. 
\f1\fs24 \

\f2\fs32 Let\'92s look at the basic solution first, which looks like this: 
\f1\fs24 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\f0\fs32 \cf2 www.hackingwithswift.com 62 
\f1\fs24 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\f2\fs32 \cf2 Let\'92s look at the basic solution first, which looks like this: 
\f1\fs24 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\f4\fs32 \cf4 \cb5 a\cf6 =\cf4 a\cf6 +\cf2 b \
b\cf6 =\cf4 a\cf6 -\cf2 b \
\cf4 a\cf6 =\cf4 a\cf6 -\cf2 b 
\f1\fs24 \cb1 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\f2\fs32 \cf2 That\'92s the solution you\'92d use in most languages, and it works fine. If you\'92re feeling smart, you can also use XOR like this: \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\f4 \cf4 \cb5 a\cf6 =\cf4 a\cf6 ^\cf2 b\
b\cf6 =\cf4 a\cf6 ^\cf2 b\
\cf4 a\cf6 =\cf4 a\cf6 ^\cf2 b 
\f1\fs24 \cf2 \cb1 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\f2\fs32 \cf2 I think that solution is fractionally easier to remember, because it uses the same operator all three times. 
\f1\fs24 \

\f2\fs32 So, those are the standard solutions, but Swift gives us two alternatives. First, there\'92s a global 
\f3\b \cf3 swap() 
\f2\b0 \cf2 function that swaps two values of the same type, like this: 
\f1\fs24 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\f4\fs32 \cf7 \cb5 swap\cf8 (\cf6 &\cf4 a\cf8 , \cf6 &\cf2 b\cf8 )\cb1 \uc0\u8232 
\f2 \cf2 The 
\f3\b \cf3 swap() 
\f2\b0 \cf2 function is micro-optimized to be as fast as possible, so you\'92ll see it used 
\f1\fs24 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\f2\fs32 \cf2 extensively in sorting algorithms. 
\f1\fs24 \

\f2\fs32 A second idiomatic solution is to use tuples. This delivers a beautifully solution to the challenge that is also undeniably Swifty: 
\f1\fs24 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\f4\fs32 \cf8 \cb5 (\cf4 a\cf8 , \cf2 b\cf8 ) \cf6 = \cf8 (\cf2 b\cf8 , \cf4 a\cf8 ) 
\f2 \cf2 \cb1 Marvelous. 
\f1\fs24 \
\
}